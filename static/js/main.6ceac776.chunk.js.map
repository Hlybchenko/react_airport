{"version":3,"sources":["api/getData.js","helper.js","components/Flights.js","components/FlightsTable.js","App.js","index.js"],"names":["dayNumber","Date","getDate","month","getMonth","fullYear","getFullYear","PATH_TODAY","concat","TYPE_DEPARTURE","TYPE_ARRIVALS","YESTERDAY","TODAY","TOMORROW","YESTERDAY_NUM","TODAY_NUM","TOMORROW_NUM","TODAY_DATE","YESTERDAY_DATE","TOMORROW_DATE","Flights","_ref","currentData","type","currentTime","timeDepShedule","toTimeString","slice","timeToStand","currentDestination","react_default","a","createElement","term","status","airline","ru","name","fltNo","tHead","FlightsTable","className","map","title","key","now","Math","random","data","components_Flights","ID","App","state","arrivalToday","departureToday","arrivalYesterday","departureYesterday","arrivalTomorrow","departureTomorrow","currentType","currentDay","setCurrentType","_this","setState","setCurrentDay","day","currentFlightsTable","fetch","then","response","json","catch","error","this","body","arrival","filter","item","actual","String","departure","_this2","_this$state","placeholder","esm","forceRenderTabPanel","onClick","components_FlightsTable","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.6ceac776.chunk.js","sourcesContent":["export const dayNumber = new Date().getDate();\nexport const month = new Date().getMonth() + 1;\nexport const fullYear = new Date().getFullYear();\n\nconst BASE_PATH = 'https://api.iev.aero/api/flights/';\n\nexport const PATH_TODAY = `${dayNumber}-${month}-${fullYear}`;\n\nexport const getData = () => fetch(`${BASE_PATH}${PATH_TODAY}`)\n  .then(response => response.json())\n  .catch(error => error);\n","import { dayNumber } from './api/getData';\n\nexport const TYPE_DEPARTURE = 'departure';\nexport const TYPE_ARRIVALS = 'arrival';\nexport const YESTERDAY = 'Yesterday';\nexport const TODAY = 'Today';\nexport const TOMORROW = 'Tomorrow';\nexport const YESTERDAY_NUM = dayNumber - 1;\nexport const TODAY_NUM = dayNumber;\nexport const TOMORROW_NUM = dayNumber + 1;\n\nconst month = new Date().getMonth() + 1;\n\nexport const TODAY_DATE = `${dayNumber}/0${month}`;\nexport const YESTERDAY_DATE = `${dayNumber - 1}/0${month}`;\nexport const TOMORROW_DATE = `${dayNumber + 1}/0${month}`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TYPE_DEPARTURE } from '../helper';\n\nconst Flights = ({ currentData, type }) => {\n  const currentTime = (\n    type === TYPE_DEPARTURE ? (\n      new Date(currentData.timeDepShedule).toTimeString().slice(0, 5)\n    ) : (\n      new Date(currentData.timeToStand).toTimeString().slice(0, 5)\n    )\n  );\n\n  const currentDestination = (\n    type === TYPE_DEPARTURE ? (\n      currentData['airportToID.city_ru']\n    ) : (\n      currentData['airportFromID.city_ru']\n    )\n  );\n\n  return (\n    <tr>\n      <td>{currentData.term}</td>\n      <td>{currentTime}</td>\n      <td>{currentDestination}</td>\n      <td>{currentData.status}</td>\n      <td>{currentData.airline.ru.name}</td>\n      <td>\n        {currentData['carrierID.IATA']}\n        {currentData.fltNo}\n      </td>\n    </tr>\n  );\n};\n\nFlights.propTypes = {\n  currentData: PropTypes.shape({\n    term: PropTypes.string.isRequired,\n    timeToStand: PropTypes.string.isRequired,\n    'airportToID.city_ru': PropTypes.string,\n    'airportFromID.city_ru': PropTypes.string,\n    'carrierID.IATA': PropTypes.string,\n    fltNo: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }).isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default Flights;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Flights from './Flights';\n\nconst tHead = [\n  'Terminal',\n  'Local Time',\n  'Destination',\n  'Status',\n  'Airline',\n  'Flight',\n];\nconst FlightsTable = ({ currentData, type }) => (\n  <table className=\"table table-borderless\">\n    <thead>\n      <tr>\n        {tHead.map(title => (\n          <th key={Date.now() * Math.random()}>{title}</th>\n        ))}\n      </tr>\n    </thead>\n\n    <tbody>\n      {currentData.map(data => (\n        <Flights currentData={data} type={type} key={data.ID + data.fltNo} />\n      ))}\n    </tbody>\n  </table>\n);\n\nFlightsTable.propTypes = {\n  currentData: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default FlightsTable;\n","import React, { Component } from 'react';\nimport {\n  Tab,\n  Tabs,\n  TabList,\n  TabPanel,\n} from 'react-tabs';\n\nimport { getData } from './api/getData';\nimport FlightsTable from './components/FlightsTable';\nimport {\n  TYPE_DEPARTURE,\n  TYPE_ARRIVALS,\n  YESTERDAY,\n  TODAY,\n  TOMORROW,\n  YESTERDAY_NUM,\n  TODAY_NUM,\n  TOMORROW_NUM,\n  TODAY_DATE,\n  YESTERDAY_DATE,\n  TOMORROW_DATE,\n} from './helper';\n\nexport default class App extends Component {\n  state = {\n    arrivalToday: [],\n    departureToday: [],\n\n    arrivalYesterday: [],\n    departureYesterday: [],\n\n    arrivalTomorrow: [],\n    departureTomorrow: [],\n\n    currentType: TYPE_DEPARTURE,\n    currentDay: YESTERDAY,\n  };\n\n  async componentDidMount() {\n    const data = await getData();\n\n    this.setState({\n      arrivalYesterday: data.body.arrival.filter(\n        item => item.actual.slice(8, 10) === String(YESTERDAY_NUM)\n      ),\n      departureYesterday: data.body.departure.filter(\n        item => item.actual.slice(8, 10) === String(YESTERDAY_NUM)\n      ),\n\n      arrivalToday: data.body.arrival.filter(\n        item => item.actual.slice(8, 10) === String(TODAY_NUM)\n      ),\n      departureToday: data.body.departure.filter(\n        item => item.actual.slice(8, 10) === String(TODAY_NUM)\n      ),\n\n      arrivalTomorrow: data.body.arrival.filter(\n        item => item.actual.slice(8, 10) === String(TOMORROW_NUM)\n      ),\n      departureTomorrow: data.body.departure.filter(\n        item => item.actual.slice(8, 10) === String(TOMORROW_NUM)\n      ),\n    });\n  }\n\n  setCurrentType = type => this.setState({ currentType: type });\n\n  setCurrentDay = day => this.setState({ currentDay: day });\n\n  currentFlightsTable = (day, type) => {\n    if (day === TODAY\n      && type === TYPE_ARRIVALS\n    ) {\n      return this.state.arrivalToday;\n    }\n\n    if (day === YESTERDAY\n      && type === TYPE_ARRIVALS\n    ) {\n      return this.state.arrivalYesterday;\n    }\n\n    if (day === TOMORROW\n      && type === TYPE_ARRIVALS\n    ) {\n      return this.state.arrivalTomorrow;\n    }\n\n    if (day === TOMORROW\n      && type === TYPE_DEPARTURE\n    ) {\n      return this.state.departureTomorrow;\n    }\n\n    if (day === TODAY\n      && type === TYPE_DEPARTURE\n    ) {\n      return this.state.departureToday;\n    }\n\n    return this.state.departureYesterday;\n  }\n\n  render() {\n    const { currentDay, currentType } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React airport</h1>\n\n        <div className=\"serach-box\">\n          <form>\n            <input\n              className=\"search-field\"\n              type=\"text\"\n              placeholder=\"Airline, destination or flight\"\n            />\n            <button type=\"button\" className=\"search-btn\">\n              SEARCH\n            </button>\n          </form>\n        </div>\n\n        {/* TOGGLE - DEPARTURES / ARRIVALS */}\n\n        <Tabs forceRenderTabPanel>\n          <div className=\"toggle-type\">\n            <TabList>\n              <Tab onClick={() => this.setCurrentType(TYPE_DEPARTURE)}>\n                DEPARTURES\n              </Tab>\n\n              <Tab onClick={() => this.setCurrentType(TYPE_ARRIVALS)}>\n                ARRIVALS\n              </Tab>\n            </TabList>\n          </div>\n\n          {/* DEPARTURES TOGGLE - YESTERDAY / TODOY / TOMORROW */}\n\n          <TabPanel>\n            <Tabs forceRenderTabPanel>\n              <TabList>\n                <Tab onClick={() => this.setCurrentDay(YESTERDAY)}>\n                  YESTERDAY\n                  <span className=\"toggle-table-date\">\n                    {YESTERDAY_DATE}\n                  </span>\n                </Tab>\n\n                <Tab onClick={() => this.setCurrentDay(TODAY)}>\n                  TODAY\n                  <span className=\"toggle-table-date\">{TODAY_DATE}</span>\n                </Tab>\n\n                <Tab onClick={() => this.setCurrentDay(TOMORROW)}>\n                  TOMORROW\n                  <span className=\"toggle-table-date\">{TOMORROW_DATE}</span>\n                </Tab>\n              </TabList>\n\n              {/* DEPARTURES TABLES */}\n\n              <div className=\"flights-table\">\n                <TabPanel name=\"departures-yesterday\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n\n                <TabPanel name=\"departures-today\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n\n                <TabPanel name=\"departures-tomorrow\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n              </div>\n            </Tabs>\n          </TabPanel>\n\n          {/* ARRIVALS TOGGLE - YESTERDAY / TODOY / TOMORROW */}\n\n          <TabPanel>\n            <Tabs forceRenderTabPanel>\n              <TabList>\n                <Tab onClick={() => this.setCurrentDay(YESTERDAY)}>\n                  YESTERDAY\n                  <span className=\"toggle-table-date\">\n                    {YESTERDAY_DATE}\n                  </span>\n                </Tab>\n\n                <Tab onClick={() => this.setCurrentDay(TODAY)}>\n                  TODAY\n                  <span className=\"toggle-table-date\">{TODAY_DATE}</span>\n                </Tab>\n\n                <Tab onClick={() => this.setCurrentDay(TOMORROW)}>\n                  TOMORROW\n                  <span className=\"toggle-table-date\">{TOMORROW_DATE}</span>\n                </Tab>\n              </TabList>\n\n              {/* ARRIVALS TABLES */}\n\n              <div className=\"flights-table\">\n                <TabPanel name=\"arrivals-yesterday\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n\n                <TabPanel name=\"arrivals-today\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n                <TabPanel name=\"arrivals-tomorrow\">\n                  <FlightsTable\n                    currentData={this.currentFlightsTable(\n                      currentDay,\n                      currentType\n                    )}\n                    type={currentType}\n                    day={currentDay}\n                  />\n                </TabPanel>\n              </div>\n            </Tabs>\n          </TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'react-tabs/style/react-tabs.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}